# Datos del sensor BME680
[gcode_macro VOCS_BME680]
gcode:
    {% set sensor = printer["bme280 BME680"] %}
    { action_respond_info(
        "Temperatura: %.2f C\n"
        "Presión: %.2f hPa\n"
        "Humedad: %.2f%%\n"
        "Nivel de gas: %.2f VOC" % (
            sensor.temperature,
            sensor.pressure,
            sensor.humidity,
            sensor.gas))  }

[gcode_macro VOCS_BME280]
gcode:
    {% set sensor = printer["bme280 BME280_inside"] %}
    { action_respond_info(
        "Temperatura: %.2f C\n"
        "Presión: %.2f hPa\n"
        "Humedad: %.2f%%\n" % (
            sensor.temperature,
            sensor.pressure,
            sensor.humidity ))  }


#----------------------------------------------------------------
# SGP 40
#     @brief Measure VOC index after humidity compensation
#      @n VOC index can indicate the quality of the air directly. The larger the value, the worse the air quality.
#      @n   0-100,no need to ventilate, purify
#      @n   100-200,no need to ventilate, purify
#      @n   200-400,ventilate, purify
#      @n   00-500,ventilate, purify intensely
#      @param duration:int Set to Warm-up time
#      @return The VOC index measured, ranged from 0 to 500

[gcode_macro VOCS_SGP40]
gcode:
    {% set sensor = printer["sgp40 SGP40_inside"] %}
    { action_respond_info(
        "Temperatura: %.2f C\n"
        "Humedad: %.2f%%\n"
        "VOC index: %.2f%%\n"
        "VOC raw data: %.2f " % (
            sensor.temperature,
            sensor.humidity,
            sensor.voc,
            sensor.gas))  }



# Escribe los datos de los sensores en un fichero

[gcode_shell_command write_voc_stats]
command: sh /home/orangepi/klipper_config/voc_stats.sh
timeout: 30.
verbose: True

[gcode_shell_command write_voc_header]
command: sh /home/orangepi/klipper_config/voc_header.sh
timeout: 30.
verbose: True

[gcode_macro GET_VOC_HEADER]
gcode:
      RUN_SHELL_COMMAND CMD=write_voc_header

[gcode_macro GET_VOC_DATA]
gcode:
    {% set sensor = printer["bme280 BME680"] %}
    {% set sensor2 = printer["bme280 BME280_inside"] %}
    {% set sensor3 = printer["sgp40 SGP40_inside"] %}
    {% set temp = (
        "%.2f,"
        "%.2f,"
        "%.2f,"
        "%.2f,"
        "%.2f,"
        "%.2f,"
        "%.2f,"
        "%.2f,"
        "%.2f,"
        "%.2f,"        
        "%.2f" % (
            sensor.temperature,
            sensor.pressure,
            sensor.humidity,
            sensor.gas,
            sensor2.temperature,
            sensor2.pressure,
            sensor2.humidity,
            sensor3.temperature,
            sensor3.humidity,
            sensor3.voc,
            sensor3.gas ))  %}
   

     RUN_SHELL_COMMAND CMD=write_voc_stats PARAMS={temp}       

[gcode_macro monitor_voc]  
variable_header_status: 0
variable_interval: 30
gcode:
    {% set status = params.STATUS|string %}
    {% set interval = params.INTERVAL|default("30")|int %}
    {% if status == "STOP" %}
        SET_GCODE_VARIABLE MACRO=monitor_voc VARIABLE=header_status VALUE=0  
        UPDATE_DELAYED_GCODE ID=voc_monitor DURATION=0
     {% else %}
        UPDATE_DELAYED_GCODE ID=voc_monitor DURATION=interval
    {% endif %}

[delayed_gcode voc_monitor]  
gcode:
    {% set header_status = printer["gcode_macro monitor_voc"].header_status %}   
    {% set interval = printer["gcode_macro monitor_voc"].interval %} 
    {% if header_status == 0 %}
      GET_VOC_HEADER 
      SET_GCODE_VARIABLE MACRO=monitor_voc VARIABLE=header_status VALUE=1    
    {% endif %}      

    GET_VOC_DATA
    UPDATE_DELAYED_GCODE ID=voc_monitor DURATION=interval

 